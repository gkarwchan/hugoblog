<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>asp.net on Ghassan&#39;s Page</title>
    <link>https://www.ghassan.page/tags/asp.net/</link>
    <description>Recent content in asp.net on Ghassan&#39;s Page</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Feb 2023 20:22:20 -0700</lastBuildDate><atom:link href="https://www.ghassan.page/tags/asp.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Implement a watchdog for your microservices using off-the-shelf ASP.Net Healthcheck UI.</title>
      <link>https://www.ghassan.page/posts/2023_02_02_aspnet_watchdog/</link>
      <pubDate>Thu, 02 Feb 2023 20:22:20 -0700</pubDate>
      
      <guid>https://www.ghassan.page/posts/2023_02_02_aspnet_watchdog/</guid>
      <description>What is a watchdogA watchdog is a service that monitor other services and take actions when it detect a service is failing.
ASP.NET starting from Core 5 has a built in UI module to monitor other services, and in few line of code you can build a watchdog for your services.
How to hook it up with your services:Your microservices should implement health check endpoints to be monitored by the orchestration service (Kubernetes, docker storm, &amp;hellip; etc).</description>
    </item>
    
    <item>
      <title>Take your development environment anywhere and on any machine with Dev Containers</title>
      <link>https://www.ghassan.page/posts/2022_12_29_devcontainer/</link>
      <pubDate>Thu, 29 Dec 2022 19:51:56 -0700</pubDate>
      
      <guid>https://www.ghassan.page/posts/2022_12_29_devcontainer/</guid>
      <description>Dev containers provides a fantastic way to onboard a new developer up and running in matter of just clone the git repository.
Dev containers allow you to create a docker container that will host all the development tools and libraries you use in your projects, and run it inside the container, and if you have an editor compatible then you can make the IDE connect to the containers and you can run or debug your code inside the containers.</description>
    </item>
    
    <item>
      <title>Prepare .NET core Microservice to be monitored by Kubernetes</title>
      <link>https://www.ghassan.page/posts/2022-12-28_prepare_aspnet_api_monitored_by_k8s/</link>
      <pubDate>Tue, 27 Dec 2022 19:47:05 -0700</pubDate>
      
      <guid>https://www.ghassan.page/posts/2022-12-28_prepare_aspnet_api_monitored_by_k8s/</guid>
      <description>Kubernetes Monitoring:Kubernetes monitors the deployed microservices and check if any failure or a deadlock that makes the service not responding in order to restart the hosting container.
Kubernetes achieve this by calling three different probes that determine the status of the container/pod. The three probes are:
liveness: which monitor any deadlock, or the service is down, and Kubernetes will remove the dead container and restart another one. startup: Your service might need time at startup to wait for all its dependencies to be ready.</description>
    </item>
    
    <item>
      <title>Some thoughts about ASP.NET Minimal API and Minimal Hosting Model</title>
      <link>https://www.ghassan.page/posts/2022_12_19_aspnet_minimal_api/</link>
      <pubDate>Mon, 19 Dec 2022 19:15:28 -0700</pubDate>
      
      <guid>https://www.ghassan.page/posts/2022_12_19_aspnet_minimal_api/</guid>
      <description>Why this post?Looking at the new ASP.NET 6 and its minimal hosting model, triggered some thoughts comparing it to ASP.NET 2, and made me think if Microsoft going back to some old concepts. And was questioning the real benefits of migrating to this model. So let me explain, and compare it with ASP.NET version 5 and 2.
The new WebApplication builder and some history of ASP.NET:Let us generate a new webapi application in .</description>
    </item>
    
    <item>
      <title>Using Secret Manager for Configuration in .NET</title>
      <link>https://www.ghassan.page/posts/2022_11_28_use_secret_manager_in_dotnet/</link>
      <pubDate>Mon, 28 Nov 2022 19:41:04 -0700</pubDate>
      
      <guid>https://www.ghassan.page/posts/2022_11_28_use_secret_manager_in_dotnet/</guid>
      <description>It is critical not to store passwords or API keys in our code.
For all environments for the development process: (QA, UAT, Pre-Production, and Production), it is easier to place it in a safe place (Azure Key Vault for example), and access it during deployment.
For developer machines, we can use Secret Manager, or sometimes called User Secrets, which has a built-in support in ASP.NET.
Enable Secret Storage:In the project you want to add a secret run this command:</description>
    </item>
    
  </channel>
</rss>
